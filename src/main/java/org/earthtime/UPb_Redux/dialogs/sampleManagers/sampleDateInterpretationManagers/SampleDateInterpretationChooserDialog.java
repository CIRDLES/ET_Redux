/*
 * SampleDateInterpretationChooserDialog.java
 *
 *
 * Copyright 2006-2017 James F. Bowring and www.Earth-Time.org
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.earthtime.UPb_Redux.dialogs.sampleManagers.sampleDateInterpretationManagers;

import java.util.Vector;
import org.earthtime.UPb_Redux.valueModels.SampleDateModel;
import org.earthtime.UPb_Redux.valueModels.ValueModel;
import org.earthtime.beans.ET_JButton;
import org.earthtime.dialogs.DialogEditor;

/**
 *
 * @author  James F. Bowring
 */
public class SampleDateInterpretationChooserDialog extends DialogEditor {

    // Fields
    private Vector<ValueModel> sampleAgeModels;
    
    private Vector<ValueModel> selectedModels;

    /** Creates new form SampleDateInterpretationChooserDialog
     * @param parent
     * @param modal
     * @param sampleAgeModels  
     */
    public SampleDateInterpretationChooserDialog(//
            java.awt.Frame parent,
            boolean modal,
            Vector<ValueModel> sampleAgeModels) {
        super(parent, modal);

        setSampleAgeModels(sampleAgeModels);
        
        selectedModels = new Vector<ValueModel>();
        
        initComponents();

        modelTypes_list.setListData(sampleAgeModels);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tracers_scrollPane = new javax.swing.JScrollPane();
        modelTypes_list = new javax.swing.JList<>();
        buttonsPanel = new javax.swing.JPanel();
        save_button = new ET_JButton();
        close_button = new ET_JButton();
        chooseTracer_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Available Sample Date Interpretation Models");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(245, 236, 206));
        setForeground(java.awt.Color.white);
        setName(getTitle());
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        modelTypes_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modelTypes_listMouseClicked(evt);
            }
        });
        tracers_scrollPane.setViewportView(modelTypes_list);

        getContentPane().add(tracers_scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 22, 326, 310));

        buttonsPanel.setBackground(new java.awt.Color(252, 236, 235));
        buttonsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        buttonsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        save_button.setForeground(new java.awt.Color(255, 51, 0));
        save_button.setText("OK");
        save_button.setMargin(new java.awt.Insets(0, 1, 0, 1));
        save_button.setPreferredSize(new java.awt.Dimension(140, 23));
        save_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_buttonActionPerformed(evt);
            }
        });
        buttonsPanel.add(save_button, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 2, 115, 25));

        close_button.setForeground(new java.awt.Color(255, 51, 0));
        close_button.setText("Cancel");
        close_button.setMargin(new java.awt.Insets(0, 1, 0, 1));
        close_button.setPreferredSize(new java.awt.Dimension(140, 23));
        close_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_buttonActionPerformed(evt);
            }
        });
        buttonsPanel.add(close_button, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 2, 115, 25));

        getContentPane().add(buttonsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 343, 340, -1));

        chooseTracer_label.setText("Choose Sample Date Interpretation Models:");
        getContentPane().add(chooseTracer_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 290, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void close_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_buttonActionPerformed
        close();
    }//GEN-LAST:event_close_buttonActionPerformed

    private void save_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_buttonActionPerformed
        OK();
        close();
    }//GEN-LAST:event_save_buttonActionPerformed

    private void modelTypes_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modelTypes_listMouseClicked
        if (evt.getClickCount() == 2) {
            OK();
            close();
        }
}//GEN-LAST:event_modelTypes_listMouseClicked

    private void OK() {
        if (modelTypes_list.getSelectedValuesList().size() > 0){
            // special handling to include both intercept date interpretations
            // get both intercept models (either both are present or neither)
            ValueModel[] interceptModels = new ValueModel[2];
            for (int i = 0; i < sampleAgeModels.size(); i ++){
                if (((SampleDateModel)sampleAgeModels.get(i)).//
                        getMethodName().equalsIgnoreCase("LowerIntercept")){
                    interceptModels[0] = sampleAgeModels.get(i);
                }
                if (((SampleDateModel)sampleAgeModels.get(i)).//
                        getMethodName().equalsIgnoreCase("UpperIntercept")){
                    interceptModels[1] = sampleAgeModels.get(i);
                }
            }            
            
            boolean interceptFlag = false;
            for (Object o: modelTypes_list.getSelectedValuesList()){
                
                if (((SampleDateModel)o).getMethodName().endsWith("Intercept")){
                    interceptFlag = true;
                }else {
                    getSelectedModels().add((ValueModel)o);
                }
            }
            
            if (interceptFlag && (interceptModels[0] != null)){
                getSelectedModels().add(interceptModels[0]);
            }
            if (interceptFlag && (interceptModels[1] != null)){
                getSelectedModels().add(interceptModels[1]);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JLabel chooseTracer_label;
    private javax.swing.JButton close_button;
    private javax.swing.JList<ValueModel> modelTypes_list;
    private javax.swing.JButton save_button;
    private javax.swing.JScrollPane tracers_scrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @return
     */
    public Vector<ValueModel> getSampleAgeModels() {
        return sampleAgeModels;
    }

    /**
     * 
     * @param sampleAgeModels
     */
    public void setSampleAgeModels(Vector<ValueModel> sampleAgeModels) {
        this.sampleAgeModels = sampleAgeModels;
    }

    /**
     * 
     * @return
     */
    public Vector<ValueModel> getSelectedModels() {
        return selectedModels;
    }

    /**
     * 
     * @param selectedModels
     */
    public void setSelectedModels(Vector<ValueModel> selectedModels) {
        this.selectedModels = selectedModels;
    }



}
