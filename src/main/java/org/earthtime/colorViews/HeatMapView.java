/*
 * HeatMapView.java
 *
 * Copyright 2006-2015 James F. Bowring and www.Earth-Time.org
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.earthtime.colorViews;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.Serializable;
import java.util.ArrayList;
import org.earthtime.UPb_Redux.ReduxConstants;
import org.earthtime.colorModels.HeatMap;

/**
 *
 * @author James F. Bowring
 */
public class HeatMapView extends javax.swing.JPanel implements Serializable {

    private ArrayList<Integer> fractionRGBs;

    /**
     * Creates new form RainbowView
     */
    public HeatMapView() {
        initComponents();

        fractionRGBs = new ArrayList<>();

        setOpaque(true);
        setBackground(Color.WHITE);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        paint((Graphics2D) g);
    }

    /**
     *
     * @param g2d
     */
    public void paint(Graphics2D g2d) {
        paintInit(g2d);

        for (int i = 0; i < getWidth(); i++) {
            int selectedIndex = HeatMap.selectColorInRange(0, 0, ((double) i) / getWidth());
            int rgb = HeatMap.getRgb().get(selectedIndex);

            g2d.setColor(new Color(rgb));
            g2d.drawLine(i, 3, i, getHeight() - 3);
        }

        if (fractionRGBs.size() > 0) {
            // mark out fractions with black lines
            g2d.setColor(Color.black);
            g2d.setStroke(new BasicStroke(1.5f));
            for (int i = 0; i < fractionRGBs.size(); i++) {
                int x = (int) ((((double) fractionRGBs.get(i)) / HeatMap.getRgb().size()) * getWidth());
                g2d.drawLine(x, 0, x, getHeight());
            }

        }
    }

    /**
     *
     * @param g2d
     */
    protected void paintInit(Graphics2D g2d) {
        RenderingHints rh = g2d.getRenderingHints();
        rh.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHints(rh);

        g2d.setPaint(Color.BLACK);
        g2d.setStroke(new BasicStroke(1.0f));
        g2d.setFont(ReduxConstants.sansSerif_10_Bold);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * @param fractionRGBs the fractionRGBs to set
     */
    public void setFractionRGBs(ArrayList<Integer> fractionRGBs) {
        this.fractionRGBs = fractionRGBs;
    }
}
